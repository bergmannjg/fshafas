namespace FsHafas.Extensions

#if !FABLE_COMPILER
open FsHafas.Api
#endif

open FsHafas.Raw
open FsHafas.Client

#if FABLE_COMPILER
open FsHafas.Client
open Fable.Core
open Fable.Core.JsInterop
#endif

#if FABLE_JS
open Thoth.Json
#endif

#if FABLE_PY
open System.Text.RegularExpressions

open Fable.SimpleJson.Python
#endif

module internal RawRequestEx =

#if FABLE_PY
    // generated by script 'scripts/names.fsx'
    let private replacements =
        Map
            [ ("a_tzoffset", "aTZOffset")
              ("crd_enc_yx", "crdEncYX")
              ("d_tzoffset", "dTZOffset")
              ("d_trn_cmp_sx", "dTrnCmpSX")
              ("get_ist", "getIST")
              ("get_iv", "getIV")
              ("get_pois", "getPOIs")
              ("get_pt", "getPT")
              ("only_rt", "onlyRT")
              ("planrt_ts", "planrtTS")
              ("poly_xl", "polyXL")
              ("show_arslink", "showARSLink") ]

    let undashify (input: string) =
        Regex.Replace(input, "_[a-z]", (fun m -> m.Value.Substring(1, 1).ToUpperInvariant()))

    let private toUndashed (xs: string list) =
        let v = List.last xs

        match replacements.TryFind(v) with
        | Some v -> Some v
        | None -> Some(undashify v)
#endif

#if FABLE_JS

    let private decoderU14
        : Decoder<
              U14<
                  LocMatchRequest,
                  TripSearchRequest,
                  JourneyDetailsRequest,
                  StationBoardRequest,
                  ReconstructionRequest,
                  JourneyMatchRequest,
                  LocGeoPosRequest,
                  LocGeoReachRequest,
                  LocDetailsRequest,
                  JourneyGeoPosRequest,
                  HimSearchRequest,
                  LineMatchRequest,
                  ServerInfoRequest,
                  SearchOnTripRequest
               >
           > =
        Decode.object (fun get -> raise (System.Exception("nyi")))

    let private encoderU14
        (u:
            U14<
                LocMatchRequest,
                TripSearchRequest,
                JourneyDetailsRequest,
                StationBoardRequest,
                ReconstructionRequest,
                JourneyMatchRequest,
                LocGeoPosRequest,
                LocGeoReachRequest,
                LocDetailsRequest,
                JourneyGeoPosRequest,
                HimSearchRequest,
                LineMatchRequest,
                ServerInfoRequest,
                SearchOnTripRequest
             >)
        =

        match u with
        | U14.Case1 r ->
            r
            |> Encode.Auto.generateEncoderCached<LocMatchRequest> (caseStrategy = CamelCase)
        | U14.Case2 r ->
            r
            |> Encode.Auto.generateEncoderCached<TripSearchRequest> (caseStrategy = CamelCase)
        | U14.Case3 r ->
            r
            |> Encode.Auto.generateEncoderCached<JourneyDetailsRequest> (caseStrategy = CamelCase)
        | U14.Case4 r ->
            r
            |> Encode.Auto.generateEncoderCached<StationBoardRequest> (caseStrategy = CamelCase)
        | U14.Case5 r ->
            r
            |> Encode.Auto.generateEncoderCached<ReconstructionRequest> (caseStrategy = CamelCase)
        | U14.Case6 r ->
            r
            |> Encode.Auto.generateEncoderCached<JourneyMatchRequest> (caseStrategy = CamelCase)
        | U14.Case7 r ->
            r
            |> Encode.Auto.generateEncoderCached<LocGeoPosRequest> (caseStrategy = CamelCase)
        | U14.Case8 r ->
            r
            |> Encode.Auto.generateEncoderCached<LocGeoReachRequest> (caseStrategy = CamelCase)
        | U14.Case9 r ->
            r
            |> Encode.Auto.generateEncoderCached<LocDetailsRequest> (caseStrategy = CamelCase)
        | U14.Case10 r ->
            r
            |> Encode.Auto.generateEncoderCached<JourneyGeoPosRequest> (caseStrategy = CamelCase)
        | U14.Case11 r ->
            r
            |> Encode.Auto.generateEncoderCached<HimSearchRequest> (caseStrategy = CamelCase)
        | U14.Case12 r ->
            r
            |> Encode.Auto.generateEncoderCached<LineMatchRequest> (caseStrategy = CamelCase)
        | U14.Case13 r ->
            r
            |> Encode.Auto.generateEncoderCached<ServerInfoRequest> (caseStrategy = CamelCase)
        | U14.Case14 r ->
            r
            |> Encode.Auto.generateEncoderCached<SearchOnTripRequest> (caseStrategy = CamelCase)

    let encode (request: RawRequest) =
        let encoder =
            Encode.Auto.generateEncoderCached (
                caseStrategy = CamelCase,
                extra = Extra.withCustom encoderU14 decoderU14 Extra.empty
            )

        request |> encoder |> Encode.toString 0

#else

#if FABLE_PY

    [<Emit("isinstance($1, ServerInfoRequest)")>]
    let private isInstanceServerInfoRequest (_: obj) : bool = jsNative

    [<Emit("isinstance($1, SearchOnTripRequest)")>]
    let private isInstanceSearchOnTripRequest (_: obj) : bool = jsNative

    let private encodeSvcReq (svcReq: SvcReq) =
        let cfg = Json.serialize svcReq.cfg

        let req =
            match svcReq.req with
            | U14.Case1 r -> Json.serialize r
            | U14.Case2 r -> Json.serialize r
            | U14.Case3 r -> Json.serialize r
            | U14.Case4 r -> Json.serialize r
            | U14.Case5 r -> Json.serialize r
            | U14.Case6 r -> Json.serialize r
            | U14.Case7 r -> Json.serialize r
            | U14.Case8 r -> Json.serialize r
            | U14.Case9 r -> Json.serialize r
            | U14.Case10 r -> Json.serialize r
            | U14.Case11 r -> Json.serialize r
            | U14.Case12 r -> Json.serialize r
            | U14.Case14 r -> Json.serialize r
            | _ -> "{}" // U14.Case13 ServerInfoRequest is empty

        sprintf "{\"cfg\":%s, \"meth\":\"%s\", \"req\":%s}" cfg svcReq.meth req

    /// encode RawRequest to json and erase type U14
    let encode (request: RawRequest) =
        try
            let svcreql = "[" + (encodeSvcReq request.svcReqL.[0]) + "]"

            let client = Json.serialize request.client
            let auth = Json.serialize request.auth

            let ext =
                match request.ext with
                | Some ext -> sprintf "\"ext\":\"%s\"," ext
                | None -> ""

            let json =
                sprintf
                    "{\"lang\":\"%s\", \"svcReqL\":%s, \"client\":%s, %s\"ver\":\"%s\", \"auth\":%s}"
                    request.lang
                    svcreql
                    client
                    ext
                    request.ver
                    auth

            // workaround: missing feature in Fable.SimpleJson.Python
            json.Replace(", \"meta\": null", "").Replace(",\"name\":null", "")
            |> SimpleJson.parseNative
            |> SimpleJson.mapKeysByPath toUndashed
            |> SimpleJson.toString
        with e ->
            printf "error encode: %s" e.Message
            raise (System.Exception(e.Message))

#else

    let private converter =
        FsHafas.Api.Converter.U14EraseConverter<
            LocMatchRequest,
            TripSearchRequest,
            JourneyDetailsRequest,
            StationBoardRequest,
            ReconstructionRequest,
            JourneyMatchRequest,
            LocGeoPosRequest,
            LocGeoReachRequest,
            LocDetailsRequest,
            JourneyGeoPosRequest,
            HimSearchRequest,
            LineMatchRequest,
            ServerInfoRequest,
            SearchOnTripRequest
         >(
            FsHafas.Api.Converter.UnionCaseSelection.Disabled
        )

    let encode (request: RawRequest) =
        Serializer.SerializeWithConverter request converter

#endif
#endif
